/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.mastermind;

/**
 *
 * @author mlongton
 */
public class MasterMindMain extends javax.swing.JFrame {
    
    MMDictionary dict;
    
    public int length;
    public boolean doGuess;
    public boolean makeWord;
    public boolean askBW;
    
    MasterMindPlayer currentPlayer;
    Word currentWord;

    /**
     * Creates new form MasterMindMain
     */
    public MasterMindMain() {
        initComponents();
        length = 4;
        //dict = new MMDictionary();
        dict = new MMArrayDictionary(length);
        //dict.localWordLength = length;
        doGuess = false;
        makeWord = true;
        askBW = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        prefsButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        guessButton = new javax.swing.JButton();
        invalidWordError = new javax.swing.JLabel();
        guessInput = new javax.swing.JTextField();
        cheatButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(436, 300));
        setPreferredSize(new java.awt.Dimension(440, 500));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(defaultTitle);
        jLabel1.setName(""); // NOI18N

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setFont(new java.awt.Font("Courier", 0, 13)); // NOI18N
        outputArea.setRows(5);
        outputArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(outputArea);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        prefsButton.setText("Settings");
        prefsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefsButtonActionPerformed(evt);
            }
        });

        restartButton.setText("Play Again");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(restartButton)
                    .addComponent(prefsButton)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {prefsButton, restartButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(prefsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(restartButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Enter your guess:");

        guessButton.setText("Guess");
        guessButton.setEnabled(false);
        guessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessButtonActionPerformed(evt);
            }
        });

        invalidWordError.setForeground(new java.awt.Color(200, 0, 0));
        invalidWordError.setText("Invalid word, please choose another");

        guessInput.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        guessInput.setEnabled(false);
        guessInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessInputActionPerformed(evt);
            }
        });

        cheatButton.setText("Hint");
        cheatButton.setEnabled(false);
        cheatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cheatButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guessInput)
                    .addComponent(invalidWordError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guessButton)
                    .addComponent(cheatButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invalidWordError)
                    .addComponent(cheatButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guessButton)
                    .addComponent(guessInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        invalidWordError.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        println("---------------------");
        if (this.askBW) {
            currentWord = new Word(this.length);
        }
        else {
            if (this.makeWord) {
                currentWord = new Word(dict.randomWord(this.length));
            }
            else {
                MasterMindNewWordDialog newWordPicker = new MasterMindNewWordDialog(this,true,dict);
                newWordPicker.setVisible(true);
                if (newWordPicker.validWord == null) return;
                currentWord = new Word(newWordPicker.validWord);
                this.length = currentWord.length;
                newWordPicker.dispose();
            }
        }
        currentPlayer = new MasterMindPlayer(dict,currentWord);
        determineEnabled();
        if (guessInput.isFocusable()) {
            guessInput.setText("");
            guessInput.requestFocusInWindow();
        }
    }//GEN-LAST:event_restartButtonActionPerformed

    private void guessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessButtonActionPerformed
        String theGuess;
        if (this.doGuess) {
            theGuess = currentPlayer.makeGuess();
        }
        else {
            theGuess = guessInput.getText().toLowerCase();
            if (dict.validWord(this.length, theGuess)) {
                invalidWordError.setVisible(false);
            }
            else {
                invalidWordError.setVisible(true);
                return;
            }
        }
        BW theAnswer;
        if (this.askBW) {
            MasterMindBWDialog answerDialog = new MasterMindBWDialog(this,true,theGuess);
            answerDialog.setVisible(true);
            theAnswer = answerDialog.bw;
            answerDialog.dispose();
            if (theAnswer == null) return;
        }
        else {
            theAnswer = currentWord.compareGuess(theGuess);
        }
        println(theGuess.toUpperCase()+": "+theAnswer.blacks+"B "+theAnswer.whites+"W");
        if (theAnswer.blacks == currentWord.length && theAnswer.whites == 0) {
            println("Got it!");
            currentPlayer = null;
        }
        else {
            currentPlayer.interpret(theGuess, theAnswer);
            if (currentPlayer.knowledge.isEmpty()) {
                println("There are no more possible words it could be!\nSomething must have gone wrong.");
                currentPlayer = null;
            }
        }
        determineEnabled();
        if (guessInput.isFocusable()) {
            guessInput.requestFocusInWindow();
            guessInput.selectAll();
        }
    }//GEN-LAST:event_guessButtonActionPerformed

    private void prefsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prefsButtonActionPerformed
        MMSettingsState currentPrefs = new MMSettingsState(this.length,(this.makeWord?MMSettingsState.RANDOM_WORD:(this.askBW?MMSettingsState.SECRET_WORD:MMSettingsState.USER_WORD)),this.doGuess);
        MasterMindSettingsDialog newGamePrefs = new MasterMindSettingsDialog(this,true,currentPrefs);
        newGamePrefs.setVisible(true);
        MMSettingsState newGameSettings = newGamePrefs.chosenSettings;
        newGamePrefs.dispose();
        if (newGameSettings != null) {
            this.length = newGameSettings.length;
            //this.dict.localWordLength = this.length;
            this.doGuess = newGameSettings.autoGuess;
            switch (newGameSettings.wordChooser) {
                case MMSettingsState.USER_WORD:
                    this.makeWord = false;
                    this.askBW = false;
                    break;
                case MMSettingsState.RANDOM_WORD:
                    this.makeWord = true;
                    this.askBW = false;
                    break;
                case MMSettingsState.SECRET_WORD:
                    this.makeWord = false;
                    this.askBW = true;
                    break;
            }
            restartButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_prefsButtonActionPerformed

    private void cheatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cheatButtonActionPerformed
        MasterMindHintDialog wordSuggester = new MasterMindHintDialog(this,true,currentPlayer.knowledge,dict);
        wordSuggester.setVisible(true);
        if (wordSuggester.selectedWord != null) {
            guessInput.setText(wordSuggester.selectedWord);
            guessButton.requestFocusInWindow();
        }
        wordSuggester.dispose();
    }//GEN-LAST:event_cheatButtonActionPerformed

    private void guessInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessInputActionPerformed
        guessButtonActionPerformed(evt);
    }//GEN-LAST:event_guessInputActionPerformed

    public void determineEnabled() {
        if (currentPlayer == null) {
            guessInput.setEnabled(false);
            guessButton.setEnabled(false);
            cheatButton.setEnabled(false);
            jLabel1.setText(defaultTitle);
        }
        else {
            guessInput.setEnabled(!this.doGuess);
            guessButton.setEnabled(true);
            cheatButton.setEnabled(!this.doGuess);
            jLabel1.setText("Guessing a "+currentWord.length+" letter word");
        }
    }
    
    public void println(String str) {
        this.print(str+"\n");
    }
    public void print(String str) {
        outputArea.append(str);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasterMindMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasterMindMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasterMindMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasterMindMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MasterMindMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cheatButton;
    private javax.swing.JButton guessButton;
    private javax.swing.JTextField guessInput;
    private javax.swing.JLabel invalidWordError;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton prefsButton;
    private javax.swing.JButton restartButton;
    // End of variables declaration//GEN-END:variables

public static final String defaultTitle = "Click \"Settings\" or \"Play Again\" to begin";
}
